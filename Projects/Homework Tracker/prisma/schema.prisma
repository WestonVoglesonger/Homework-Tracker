// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // For SQLite (development)
  provider = "sqlite"
  url      = env("DATABASE_URL")
  
  // For PostgreSQL (production) - uncomment these lines and comment out SQLite
  // provider = "postgresql"
  // url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  email         String?      @unique
  emailVerified DateTime?
  name          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  assignments   Assignment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String       @id @default(cuid())
  userId      String
  name        String
  code        String?
  term        String?
  color       String?
  source      String       @default("manual") // "manual" or "canvas"
  canvasId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignments Assignment[]

  @@unique([userId, canvasId])
}

model Assignment {
  id             String   @id @default(cuid())
  userId         String
  courseId       String?
  title          String
  description    String?  // New field for Canvas descriptions
  type           String   @default("OTHER") // HOMEWORK, QUIZ, EXAM, PROJECT, OTHER
  dueAt          DateTime?
  estimatedHours Float?
  status         String   @default("TODO") // TODO, IN_PROGRESS, DONE
  priority       Int      @default(0)
  notes          String?
  source         String   @default("manual") // "manual" or "canvas"
  canvasId       String?
  canvasUrl      String?  // New field for Canvas assignment URL
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, canvasId])
}


